<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on 人人都爱小雀斑&#39;s blog</title>
    <link>https://billie52707.cn/tags/python/</link>
    <description>Recent content in python on 人人都爱小雀斑&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Billie</copyright>
    <lastBuildDate>Sun, 04 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://billie52707.cn/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>python模块详解 | opencv</title>
      <link>https://billie52707.cn/draft/python-opencv/</link>
      <pubDate>Sun, 04 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/python-opencv/</guid>
      <description>》》》常用函数《《《 图像读取：cv.imread() 图像显示：cv.imshow() 图像叠加：cv.addWeighted() 键盘响应：cv</description>
    </item>
    
    <item>
      <title>python模块详解 | multiprocessing</title>
      <link>https://billie52707.cn/draft/python-multiprocessing/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/python-multiprocessing/</guid>
      <description>官方文档 - https://docs.python.org/zh-cn/3/library/multiprocessing.html 计算运行时间 import multiprocessing as mp import time def target(arg): ... if __name__ == &amp;#39;__main__&amp;#39; start = time.time() processes = [] for i in range(5): process = mp.Process(target=target, args=(i,)) process.start() # processes.append(process) for process in processes: process.join() # end = time.time() print(f&amp;#39;共耗时：{en</description>
    </item>
    
    <item>
      <title>线程、进程、协程，该用哪一个比较好？</title>
      <link>https://billie52707.cn/draft/thread-process-coroutine/</link>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/thread-process-coroutine/</guid>
      <description></description>
    </item>
    
    <item>
      <title>浅谈自动化爬虫场景下的数据持久化</title>
      <link>https://billie52707.cn/posts/2021/6/user-data-dir/</link>
      <pubDate>Mon, 21 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/6/user-data-dir/</guid>
      <description>每次我们使用 selenium 或 Pyppeteer 打开的时候都是一个新的空白的浏览器。而且如果遇到了需要登录的网页之后，如果我们这次登录上了，下一次再启动又是空白了，又得登</description>
    </item>
    
    <item>
      <title>python模块详解 | pyppeteer</title>
      <link>https://billie52707.cn/posts/2021/6/python-pyppeteer/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/6/python-pyppeteer/</guid>
      <description>Selenium &amp;amp; Pyppeteer selenium的功能十分强大，但很多时候我们发现他也有其自身的缺点，比如： 需要安装好相关的浏览器，Chrome或Firefox等 需要</description>
    </item>
    
    <item>
      <title>python模块详解 | hashlib</title>
      <link>https://billie52707.cn/draft/python-hashlib/</link>
      <pubDate>Tue, 08 Jun 2021 20:54:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/python-hashlib/</guid>
      <description>什么是hash？ hash是一种算法，该算法通过传值，经过运算得到一串hash值。hash函数有很多种类型，不同之处是其复杂度不同。 hash值</description>
    </item>
    
    <item>
      <title>「rsa」学习笔记</title>
      <link>https://billie52707.cn/draft/rsa/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/rsa/</guid>
      <description>图解RSA算法</description>
    </item>
    
    <item>
      <title>网络爬虫学习笔记</title>
      <link>https://billie52707.cn/draft/spider/</link>
      <pubDate>Tue, 08 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/spider/</guid>
      <description>反爬虫笔记 验证码 思路 - 商用API接口、打码平台、自主训练深度学习模型等 伪造headers（请求头） 简介 - 简单的headers可应对反爬很一般</description>
    </item>
    
    <item>
      <title>python模块详解 | urllib</title>
      <link>https://billie52707.cn/posts/2021/6/python-urllib/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/6/python-urllib/</guid>
      <description>官方文档 - https://docs.python.org/3/library/urllib.html urllib is a package that collects several modules for working with URLs: urllib.request for opening and reading URLs urllib.error containing the exceptions raised by urllib.request urllib.parse for parsing URLs urllib.robotparser for parsing robots.txt files urllib.request urllib.request.urlopen(url,data=None,[timeout, ],cafile=None,capath=None,cadefault=False,context=None)</description>
    </item>
    
    <item>
      <title>python模块详解 | aiohttp</title>
      <link>https://billie52707.cn/posts/2021/6/python-aiohttp/</link>
      <pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/6/python-aiohttp/</guid>
      <description>About Key Features Supports both Client and HTTP Server. Supports both Server WebSockets and Client WebSockets out-of-the-box without the Callback Hell. Web-server has Middlewares, Signals and plugable routing. 客户端 - https://docs.aiohttp.org/en/stable/client.html#aiohttp-client 服务端 - https://docs.aiohttp.org/en/stable/web.html#aiohttp-web asyncio - https://billie52707.cn/posts/2021/5/python-asyncio/ 一个简单的示例 import asyncio, aiohttp, time async def fetch(session,url): async with session.get(url, verify_ssl=False) as response: return await response.text(), response.status async def main(): async with</description>
    </item>
    
    <item>
      <title>python模块详解 | asyncio</title>
      <link>https://billie52707.cn/posts/2021/5/python-asyncio/</link>
      <pubDate>Mon, 31 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/python-asyncio/</guid>
      <description>why async？ 堵塞 阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他的事情，则称该程序在该操作</description>
    </item>
    
    <item>
      <title>最近的一些小项目</title>
      <link>https://billie52707.cn/posts/2021/5/recent-projects/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/recent-projects/</guid>
      <description>unsplash 预览地址 - https://billie52707.cn/photo/ 项目仓库 - https://github.com/chenxuefan/crawler/tree/main/unsplash 功能模块 - 按照topic（类型）爬取图片（每个类型只爬一张）、前端展示页面 技术栈 - requests、re、xpat</description>
    </item>
    
    <item>
      <title>python模块详解 | BeautifulSoup</title>
      <link>https://billie52707.cn/posts/2021/5/python-beautifulsoup/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/python-beautifulsoup/</guid>
      <description>前言 Why BeautifulSoup? Beautiful Soup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的</description>
    </item>
    
    <item>
      <title>python模块详解 | re</title>
      <link>https://billie52707.cn/posts/2021/5/python-re/</link>
      <pubDate>Thu, 13 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/python-re/</guid>
      <description>前言 正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。 Python 自1.5版本起增加了re 模块，它提供 Perl 风格的正则表达</description>
    </item>
    
    <item>
      <title>python学习笔记 | r&#39;&#39;, b&#39;&#39;, u&#39;&#39;, f&#39;&#39;</title>
      <link>https://billie52707.cn/posts/2021/5/python-rbuf/</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/python-rbuf/</guid>
      <description>r&#39;&#39; - 非转义原生字符串 以r开头的字符，常用于正则表达式，对应着re模块。 r&#39;\n&#39; - 经处理，&#39;\n&amp;rsquo;表示的是&#39;\&amp;lsquo;和&amp;rsqu</description>
    </item>
    
    <item>
      <title>python模块详解 | scrapy</title>
      <link>https://billie52707.cn/draft/python-scrapy/</link>
      <pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/python-scrapy/</guid>
      <description>安装 - pip install scrapy 新建项目 - scrapy startproject project_name /项目目录层级关系/ scrapy.cfg: 项目的配置文件 tutorial/: 该项目的python模块。之后您将在此加入代码。 tutorial/items.py: 项目中的item文件. tutorial/pipelines.py:</description>
    </item>
    
    <item>
      <title>GlidedSky | 爬虫题目2</title>
      <link>https://billie52707.cn/posts/2021/5/glidedsky-level2/</link>
      <pubDate>Fri, 07 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/glidedsky-level2/</guid>
      <description>题目地址 - http://glidedsky.com/level/crawler-basic-2 待爬取网站 - http://glidedsky.com/level/web/crawler-basic-2 心得 这道题新增了分页的机制，对服务端来讲，分页好处是可以反爬。这道题而言，对请求链接进行迭代处理，多次请求即可，如</description>
    </item>
    
    <item>
      <title>python模块详解 | requests</title>
      <link>https://billie52707.cn/posts/2021/5/python-requests/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/python-requests/</guid>
      <description>Requests: 让 HTTP 服务人类 官方文档 - https://docs.python-requests.org/zh_CN/latest/ 快速上手 https://docs.python-requests.org/zh_CN/latest/user/quickstart.html （1）发送请求 request(method, url, **kwargs) get(url, params=None, **kwargs) options(url, **kwargs) head(url, **kwargs) post(url, data=None, json=None, **kwargs) put(url, data=None, **kwargs) patch(url, data=None, **kwargs) delete(url, **kwargs) r = requests.put(&amp;#39;http://httpbin.org/put&amp;#39;, data = {&amp;#39;key&amp;#39;:&amp;#39;value&amp;#39;}) r = requests.delete(&amp;#39;http://httpbin.org/delete&amp;#39;) r = requests.head(&amp;#39;http://httpbin.org/get&amp;#39;) r = requests.options(&amp;#39;http://httpbin.org/get&amp;#39;) （2）请求参数 params</description>
    </item>
    
    <item>
      <title>python模块详解 | threading</title>
      <link>https://billie52707.cn/draft/python-threading/</link>
      <pubDate>Thu, 06 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/python-threading/</guid>
      <description>官方文档 - https://docs.python.org/zh-cn/3/library/threading.html 线程 创建子线程 - threading.Thread() import threading def func(i): print(i) threading.Thread(target = func, args = (1,)) 计算运行时间 import threading, time def target(arg): ... if __name__ == &amp;#39;__main__&amp;#39; start = time.time() threads = [] for i in range(5): thread = threading.Thread(target = target, args = (i,)) thread.start() threads.append(thread) for thread in threads: thread.join() end = time.time()</description>
    </item>
    
    <item>
      <title>GlidedSky | 爬虫题目1</title>
      <link>https://billie52707.cn/posts/2021/5/glidedsky-level1/</link>
      <pubDate>Wed, 05 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/glidedsky-level1/</guid>
      <description>题目地址 - http://glidedsky.com/level/crawler-basic-1 待爬取网站 - http://glidedsky.com/level/web/crawler-basic-1 心得 这道题目所需的技能点都很基础，如发送请求、文档解析，很多工具都可以达到目的，重要是要寻找最简短的代码、最优雅的</description>
    </item>
    
    <item>
      <title>python模块详解 | wordcloud</title>
      <link>https://billie52707.cn/posts/2021/5/python-wordcloud/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/5/python-wordcloud/</guid>
      <description>今天是五一假期的第一天，学一点有意思的东西！ 数据分析领域经常会用到统计与展示的功能需求，数据的展示方式，传统的有统计图之类，但稍显古板，对于</description>
    </item>
    
    <item>
      <title>python学习笔记 | 异常处理</title>
      <link>https://billie52707.cn/posts/2021/4/python-error/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/4/python-error/</guid>
      <description>什么是异常? 异常就是程序运行时发生错误的信号（在程序出现错误时，则会产生一个异常，若程序没有处理它，则会抛出该异常，程序的运行也随之终止）。</description>
    </item>
    
    <item>
      <title>python学习笔记 | 迭代器&amp;生成器</title>
      <link>https://billie52707.cn/posts/2021/4/python-iterator-generator/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/4/python-iterator-generator/</guid>
      <description>迭代器（iterator） 迭代器是访问集合元素的一种方式。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不</description>
    </item>
    
    <item>
      <title>网络爬虫学习笔记</title>
      <link>https://billie52707.cn/spider/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/spider/</guid>
      <description>就想写个爬虫，我到底要学多少东西啊？ 爬虫基础原理 🕷️ 必知必会，掌握 HTTP 基本原理 夯实根基，Web 网页基础 原理探究，了解爬虫的基本原理 基础探究，S</description>
    </item>
    
    <item>
      <title>python学习笔记 | xpath</title>
      <link>https://billie52707.cn/posts/2021/4/python-xpath/</link>
      <pubDate>Thu, 22 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/4/python-xpath/</guid>
      <description>$(function () { var html = &#34;\n\n\u003ciframe frameborder=\u0022no\u0022 border=\u00220\u0022 marginwidth=\u00220\u0022 marginheight=\u00220\u0022 width=100% height=86 src=\u0022\/\/music.163.com\/outchain\/player?type=2\u0026id=432698831\u0026auto=1\u0026height=66\u0022\u003e\u003c\/iframe\u003e\n\n&#34; html = html.replace(/&#34;{/g, &#34;{&#34;) html = html.replace(/{&#34;/g, &#34;{&#34;) html = html.replace(/&#34;}/g, &#34;}&#34;) html = html.replace(/}&#34;/g, &#34;}&#34;) $(&#39;#raw&#39;).html(html); let postTitle = $(&#39;.posttitle&#39;).text() let postContentTitle = $(&#39;#raw h1&#39;).text() if(postTitle === postContentTitle){ $(&#39;#raw h1&#39;).hide() } $(&#39;button.preview&#39;).hide() }) 关于lxml ​ lxml是python的一个解</description>
    </item>
    
    <item>
      <title>python模块详解 | keyboard</title>
      <link>https://billie52707.cn/draft/python-keyboard/</link>
      <pubDate>Thu, 15 Apr 2021 20:54:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/python-keyboard/</guid>
      <description>write(text, delay=0, restore_state_after=True, exact=None) send(hotkey, do_press=True, do_release=True) press_and_release() /换汤不换药/ is_pressed() parse_hotkey(hotkey)</description>
    </item>
    
    <item>
      <title>python模块详解 | logging</title>
      <link>https://billie52707.cn/posts/2021/4/python-logging/</link>
      <pubDate>Wed, 14 Apr 2021 20:54:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/4/python-logging/</guid>
      <description>官方文档 - https://docs.python.org/zh-cn/3.8/howto/logging.html#logging-basic-tutorial 基础日志 - logging.basicConfig() 日志基础教程 import logging logging.basicConfig( filename=&amp;#39;document.log&amp;#39;, level=logging.INFO, format=&amp;#34;%(asctime)s%(pathname)s[%(lineno)s]%(levelname)s:%(message)s&amp;#34;, datefmt=&amp;#34;%Y-%m-%d%H:%M:%S %p&amp;#34; ) logging.info(&amp;#39;记录到日志&amp;#39;) 下面结合四个参数展开来聊一下</description>
    </item>
    
    <item>
      <title>python学习笔记 | 一次使用装饰器时引发的思考</title>
      <link>https://billie52707.cn/posts/2021/4/python-decorator-return/</link>
      <pubDate>Tue, 13 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/4/python-decorator-return/</guid>
      <description>$(function () { var html = &#34;\n\n\u003ciframe frameborder=\u0022no\u0022 border=\u00220\u0022 marginwidth=\u00220\u0022 marginheight=\u00220\u0022 width=100% height=86 src=\u0022\/\/music.163.com\/outchain\/player?type=2\u0026id=1444648358\u0026auto=1\u0026height=66\u0022\u003e\u003c\/iframe\u003e\n\n&#34; html = html.replace(/&#34;{/g, &#34;{&#34;) html = html.replace(/{&#34;/g, &#34;{&#34;) html = html.replace(/&#34;}/g, &#34;}&#34;) html = html.replace(/}&#34;/g, &#34;}&#34;) $(&#39;#raw&#39;).html(html); let postTitle = $(&#39;.posttitle&#39;).text() let postContentTitle = $(&#39;#raw h1&#39;).text() if(postTitle === postContentTitle){ $(&#39;#raw h1&#39;).hide() } $(&#39;button.preview&#39;).hide() }) 前言 今天使用装饰器时，遇到这样一个错误： 根据</description>
    </item>
    
    <item>
      <title>python模块详解 | os</title>
      <link>https://billie52707.cn/posts/2021/4/python-os/</link>
      <pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/4/python-os/</guid>
      <description>os os.remove(path) 删除文件 os.removedirs(path) 删除空文件夹 os.mkdir(dirname) - 新建文件夹 os.rmdir(path) - 删除空文件夹 os.rename(a,b) - 重命名 os.listdir(path) - 返回路径下所有的文件及文件夹 os.system(&amp;quot;ls&amp;quot;) - 运行shell命令 os.path os.path.getatime(path) 最近访问时间（时</description>
    </item>
    
    <item>
      <title>python学习笔记 | 装饰器</title>
      <link>https://billie52707.cn/posts/2021/4/python-decorator/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/4/python-decorator/</guid>
      <description>$(function () { var html = &#34;\n\n\u003ciframe frameborder=\u0022no\u0022 border=\u00220\u0022 marginwidth=\u00220\u0022 marginheight=\u00220\u0022 id=\u0022\nneteasemusic\u0022 width=100% height=86 src=\u0022\/\/music.163.com\/outchain\/player?type=2\u0026id=1832613147\u0026auto=1\u0026height=66\u0022\u003e\u003c\/iframe\u003e\n\n&#34; html = html.replace(/&#34;{/g, &#34;{&#34;) html = html.replace(/{&#34;/g, &#34;{&#34;) html = html.replace(/&#34;}/g, &#34;}&#34;) html = html.replace(/}&#34;/g, &#34;}&#34;) $(&#39;#raw&#39;).html(html); let postTitle = $(&#39;.posttitle&#39;).text() let postContentTitle = $(&#39;#raw h1&#39;).text() if(postTitle === postContentTitle){ $(&#39;#raw h1&#39;).hide() } $(&#39;button.preview&#39;).hide() }) 前言 1. 如何理解Python装饰器？ 装饰器本</description>
    </item>
    
    <item>
      <title>python模块详解 | openpyxl</title>
      <link>https://billie52707.cn/posts/2021/3/python-openpyxl/</link>
      <pubDate>Sun, 28 Mar 2021 01:54:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/3/python-openpyxl/</guid>
      <description>前言 官方文档 https://pypi.org/project/openpyxl/ 常规使用 1. 工作簿的使用 wb = openpyxl.Workbook() # 新建 wb = openpyxl.load_workbook(&amp;#39;filename&amp;#39;) # 加载本地的文件 all_sheet = wb.sheetnames # 获取所有的sheet，返回list wb.remove(sheetname) 2. 工作表的使用 ## 创建工作表</description>
    </item>
    
    <item>
      <title>「python」学习笔记</title>
      <link>https://billie52707.cn/note/python/</link>
      <pubDate>Fri, 26 Mar 2021 20:54:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/note/python/</guid>
      <description>更多 - https://billie52707.cn/tags/python/ 基础知识点 概念 namespace（命名空间） 定义： 每一个作用域变量存储的位置，或者解释为 存储作用域中变量的字典 作用： 获取想查看某个作</description>
    </item>
    
    <item>
      <title>Ajax 的原理和解析</title>
      <link>https://billie52707.cn/posts/2021/2/ajax/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/ajax/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 当我们在用 requests 抓取页面的时候，得到的结果可能会和在浏览器中看到的不一样：在浏览器中正常</description>
    </item>
    
    <item>
      <title>代理的基本原理和用法</title>
      <link>https://billie52707.cn/posts/2021/2/proxy/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/proxy/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 我们在做爬虫的过程中经常会遇到这样的情况，最初爬虫正常运行，正常抓取数据，一切看起来</description>
    </item>
    
    <item>
      <title>原理探究，了解爬虫的基本原理</title>
      <link>https://billie52707.cn/posts/2021/2/principle/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/principle/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 我们可以把互联网比作一张大网，而爬虫（即网络爬虫）便是在网上爬行的蜘蛛。如果把网的节</description>
    </item>
    
    <item>
      <title>基础探究，Session 与 Cookies</title>
      <link>https://billie52707.cn/posts/2021/2/sessioncookies/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/sessioncookies/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 我们在浏览网站的过程中，经常会遇到需要登录的情况，而有些网页只有登录之后才可以访问，</description>
    </item>
    
    <item>
      <title>多路加速，了解多线程基本原理</title>
      <link>https://billie52707.cn/posts/2021/2/thread/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/thread/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 我们知道，在一台计算机中，我们可以同时打开许多软件，比如同时浏览网页、听音乐、打字等</description>
    </item>
    
    <item>
      <title>多路加速，了解多进程基本原理</title>
      <link>https://billie52707.cn/posts/2021/2/process/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/process/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 在上一课时我们了解了多线程的基本概念，同时我们也提到，Python 中的多线程是不能很</description>
    </item>
    
    <item>
      <title>夯实根基，Web 网页基础</title>
      <link>https://billie52707.cn/posts/2021/2/web/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/web/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 当我们用浏览器访问网站时，页面各不相同，那么你有没有想过它为何会呈现成这个样子呢？本</description>
    </item>
    
    <item>
      <title>就想写个爬虫，我到底要学多少东西啊？</title>
      <link>https://billie52707.cn/posts/2021/2/spider/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/spider/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 当今大数据的时代，网络爬虫已经成为了获取数据的一个重要手段。 但要学习好爬虫并没有那么</description>
    </item>
    
    <item>
      <title>异步爬虫的原理和解析</title>
      <link>https://billie52707.cn/posts/2021/2/async/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/async/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 我们知道爬虫是 IO 密集型任务，比如如果我们使用 requests 库来爬取某个站点的话，发出一个请求之后</description>
    </item>
    
    <item>
      <title>必知必会，掌握 HTTP 基本原理</title>
      <link>https://billie52707.cn/posts/2021/2/http/</link>
      <pubDate>Sat, 27 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2021/2/http/</guid>
      <description>*本篇转自拉勾教育《52讲轻松搞定网络爬虫》作者：崔庆才 URI 和 URL 首先，我们来了解一下 URI 和 URL，URI 的全称为 Uniform Resource Identifier，即统一</description>
    </item>
    
    <item>
      <title>深信息学生信息查询系统</title>
      <link>https://billie52707.cn/posts/2020/12/scores-search/</link>
      <pubDate>Tue, 08 Dec 2020 02:30:10 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/12/scores-search/</guid>
      <description>技术栈 🀄️ Django requests rsa nginx 项目简介 ➖ 此项目旨在「方便同学查询学科成绩」，以往查询成绩的方式主要为 登录教务系统，查看成绩，需要连接学校内网，过程较为繁</description>
    </item>
    
    <item>
      <title>python模块详解 | pyqt5</title>
      <link>https://billie52707.cn/draft/python-pyqt5/</link>
      <pubDate>Tue, 08 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/python-pyqt5/</guid>
      <description>前言 PyQt5简介 PyQt是QT框架的Python语言实现，存在有PyQt3，PyQt4，PyQt5三个版本。PyQt5已经于之前的版本有较</description>
    </item>
    
    <item>
      <title>使用selenium登录雨课堂并获取课程信息</title>
      <link>https://billie52707.cn/posts/2020/12/yuketang-login/</link>
      <pubDate>Sat, 05 Dec 2020 02:30:10 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/12/yuketang-login/</guid>
      <description>登录 ⌛️ 操作逻辑：运行程序 - 微信扫码登录 - 获取登录cookie，下次运行程序时即可跳过扫码直接登录 class Yuketang: def __init__(self): self.login_url = &amp;#34;https://sziit.yuketang.cn/pro/portal/home/&amp;#34; self.dataDic = dict() self.bar=ProgressBar(widgets=[Percentage(),Bar(&amp;#39;#&amp;#39;), &amp;#39; &amp;#39;, Timer(), &amp;#39; &amp;#39;, ETA(), &amp;#39; &amp;#39;])#,term_width=12,FileTransferSpeed(), def Explicit_Waits(self,driver,</description>
    </item>
    
    <item>
      <title>NCP | 爬取国家卫健委网站</title>
      <link>https://billie52707.cn/posts/2020/11/ncp-nhc-readme/</link>
      <pubDate>Sun, 29 Nov 2020 14:34:18 +0800</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/11/ncp-nhc-readme/</guid>
      <description>1. 前言 🇨🇳 1.1 目标网站 「http://www.nhc.gov.cn/xcs/yqtb/list_gzbd.shtml」 ​ 做疫情这个项目的时候，</description>
    </item>
    
    <item>
      <title>NCP | 新冠疫情的监测与趋势分析</title>
      <link>https://billie52707.cn/posts/2020/11/ncp-readme/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/11/ncp-readme/</guid>
      <description>1. 前言 🇨🇳 1.1 项目阐述 👨🏻‍💻 2020，注定是不平凡的一年，新冠疫情如晴天霹雳将沉浸在2020年春节气氛中的人们骤然推进人人自危的疫情防控中，</description>
    </item>
    
    <item>
      <title>python模块详解 | matplotlib</title>
      <link>https://billie52707.cn/draft/python-matplotlib/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/draft/python-matplotlib/</guid>
      <description>一、图表的保存 ##保存图片 直接输入文件路径，新建文件名字 ##dpi图片分辨率 越高越清晰。bbox_inches = &#39;tight&#39;,去掉空白部分</description>
    </item>
    
    <item>
      <title>python学习笔记 | 浅谈python虚拟环境</title>
      <link>https://billie52707.cn/posts/2020/11/python-venv/</link>
      <pubDate>Sun, 08 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/11/python-venv/</guid>
      <description>前言 python虚拟环境是非常实用且必备的小技能。面对多个项目分别需要不同依赖库环境，或者跨平台部署的场景，都非常实用且优雅。 跨平台部署时，</description>
    </item>
    
    <item>
      <title>Jupyter Notebook学习笔记</title>
      <link>https://billie52707.cn/posts/2020/11/jupyter-notebook/</link>
      <pubDate>Thu, 05 Nov 2020 02:30:10 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/11/jupyter-notebook/</guid>
      <description>Jupyter Notebook 入门 通过 Jupyter 使用实时代码、方程式和可视化及文本创建交互式的共享笔记本。 自从有了纸莎草纸以来，出版人们一直在努力以吸引读者的方式来格式化数据</description>
    </item>
    
    <item>
      <title>python学习笔记 | 进制转换问题</title>
      <link>https://billie52707.cn/posts/2020/9/scale-question/</link>
      <pubDate>Fri, 11 Sep 2020 01:00:00 +0800</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/9/scale-question/</guid>
      <description>前言 今天有同学来问我关于二级python计算机考试中进制间的转换问题，才想起来好久没有复习这方面的知识了，大都已经忘却，于是花了两个小时梳理</description>
    </item>
    
    <item>
      <title>「机器学习」学习笔记</title>
      <link>https://billie52707.cn/note/machine-learn/</link>
      <pubDate>Tue, 25 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/note/machine-learn/</guid>
      <description>相关工具 pandas numpy matplotlib flask scikit_learn 数据理解 1. 数据导入 numpy np.loadtxt() pandas pd.read_csv() 2. 数据理解 Viewing data 查看数据：df.head(int)\tail(int) 数据维度：df.shape 数</description>
    </item>
    
    <item>
      <title>python&#43;hugo&#43;nginx | 实现博客主页每日一图</title>
      <link>https://billie52707.cn/posts/2020/8/python-hugo-nginx-daily-picture/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/8/python-hugo-nginx-daily-picture/</guid>
      <description>前言 在建博客之前，我现在的域名访问的对象，是使用nginx部署在服务器的一个页面，并且由于加入了python脚本，这个页面每天都会更新，每天</description>
    </item>
    
    <item>
      <title>hugo建站全指南 | 我的第一个博客网站</title>
      <link>https://billie52707.cn/posts/2020/8/hugo-my-first-web/</link>
      <pubDate>Tue, 04 Aug 2020 18:42:17 +0800</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/8/hugo-my-first-web/</guid>
      <description>前言 建博客的初衷？ 2020年八月的第一天，我还是像往常一样打开我的域名，本以为还是会像以前一样显示每日一图的界面，结果出现的却是破图，当即开</description>
    </item>
    
    <item>
      <title>python模块详解 | pyquery</title>
      <link>https://billie52707.cn/posts/2020/7/python-pyquery/</link>
      <pubDate>Fri, 31 Jul 2020 00:46:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/7/python-pyquery/</guid>
      <description>简介 pyquery是一个强大的 HTML 解析库，利用它，我们可以直接解析 DOM 节点的结构，并通过 DOM 节点的一些属性快速进行内容提取。 官方文档：http:/</description>
    </item>
    
    <item>
      <title>python学习笔记 | 国内常用源镜像地址</title>
      <link>https://billie52707.cn/posts/2020/7/python-mirrors/</link>
      <pubDate>Wed, 15 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/7/python-mirrors/</guid>
      <description>各镜像列表 清华：https://pypi.tuna.tsinghua.edu.cn/simple 阿里云：http://mirrors.ali</description>
    </item>
    
    <item>
      <title>python学习笔记 | macOS Big Sur动态壁纸食用指南</title>
      <link>https://billie52707.cn/posts/2020/6/python-macos-big-sur/</link>
      <pubDate>Sat, 27 Jun 2020 22:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/6/python-macos-big-sur/</guid>
      <description>目录 前言 爬虫篇 壁纸使用篇 后记 前言 北京时间23日凌晨1点，苹果WWDC2020大会开幕。在发布会上，苹果正式发布了新版macOS，并将其命名为</description>
    </item>
    
    <item>
      <title>python模块详解 | unittest（单元测试框架）</title>
      <link>https://billie52707.cn/posts/2020/6/python-unittest/</link>
      <pubDate>Mon, 15 Jun 2020 14:12:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/6/python-unittest/</guid>
      <description>目录： why unittest？ unittest的四个重要概念 加载测试用例的三个方法 自动加载测试用例 忽略测试和预期失败 生成html测试报告 why unittest ? 简</description>
    </item>
    
    <item>
      <title>python模块详解 | selenium</title>
      <link>https://billie52707.cn/posts/2020/6/python-selenium/</link>
      <pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/6/python-selenium/</guid>
      <description>关于Selenium Selenium是⼀个⽤于测试⽹站的⾃动化测试⼯具，⽀持各种浏览器包括Chrome、Firefox、Safari等主流界</description>
    </item>
    
    <item>
      <title>python模块详解 | filecmp</title>
      <link>https://billie52707.cn/posts/2020/4/python-filecmp/</link>
      <pubDate>Thu, 30 Apr 2020 14:33:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/4/python-filecmp/</guid>
      <description>简介： filecmp是python内置的一个模块，用于比较文件及文件夹的内容，它是一个轻量级的工具，使用非常简单 两个主要的方法： filecmp.cmp(f1, f2[, shallow]) 比较两</description>
    </item>
    
    <item>
      <title>python模块详解 | shutil</title>
      <link>https://billie52707.cn/posts/2020/4/python-shutil/</link>
      <pubDate>Thu, 30 Apr 2020 14:28:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/4/python-shutil/</guid>
      <description>简介 shutil是python的一个内置模块，提供了许多关于文件和文件集合的高级操作，特别提供文件夹与文件操作、归档操作了支持文件复制和删除</description>
    </item>
    
    <item>
      <title>python学习笔记 | strftime()格式化输出时间</title>
      <link>https://billie52707.cn/posts/2020/4/python-strftime/</link>
      <pubDate>Tue, 07 Apr 2020 11:01:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/4/python-strftime/</guid>
      <description>示例 # time模块 import time t = time.strftime(&amp;#34;%Y-%m-%d%H:%M:%S&amp;#34;) print(t) # datetime模块 import datetime t = datetime.datetime.now().strftime(&amp;#34;%Y-%m-%d%H:%M:%S&amp;#34;) print(t) 格式化输出之后，就得到了我们常见的格式了👇 2020-04-07 10:59:36 format参数 格式 描述 %y 两位</description>
    </item>
    
    <item>
      <title>python模块详解 | progressbar</title>
      <link>https://billie52707.cn/posts/2020/3/python-progressbar/</link>
      <pubDate>Tue, 17 Mar 2020 20:54:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/3/python-progressbar/</guid>
      <description>参考官方文档：https://pypi.org/project/progressbar/#description progressbar 安装 pip install progressbar progressbar.ProgressBar() 可选参数 maxval = None</description>
    </item>
    
    <item>
      <title>python学习笔记 | PyCharm创建文件时自动添加头文件</title>
      <link>https://billie52707.cn/posts/2020/3/python-pycharm/</link>
      <pubDate>Mon, 16 Mar 2020 20:45:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/3/python-pycharm/</guid>
      <description>Windows：File 👉 Settings 👉 Editor 👉 File and Code Templates 👉 Python Script macOS：PyCharm &amp;gt; Preferences &amp;hellip; 然后在右边的框中写入信息就可以啦： # -*- coding: utf-8 -*- &amp;quot;&amp;quot;&amp;quot; @Author ${USER} @Date ${DATE} ${TIME} @Describe &amp;quot;&amp;quot;&amp;quot;</description>
    </item>
    
    <item>
      <title>python模块详解 | time</title>
      <link>https://billie52707.cn/posts/2020/3/python-time/</link>
      <pubDate>Sun, 15 Mar 2020 20:54:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/3/python-time/</guid>
      <description>time 这个模块提供各种与时间相关的函数。 以下是对一些术语和惯例的解释 初始时间因平台而异。对于Unix平台，初始时间是1970,01,01,00:</description>
    </item>
    
    <item>
      <title>python模块详解 | psutil</title>
      <link>https://billie52707.cn/posts/2020/3/python-psutil/</link>
      <pubDate>Sun, 15 Mar 2020 10:17:00 +0000</pubDate>
      
      <guid>https://billie52707.cn/posts/2020/3/python-psutil/</guid>
      <description>psutil简介 psutil是一个开源且跨平台的库，其提供了便利的函数用来获取系统的信息，比如CPU，内存，磁盘，网络等。此外，psutil</description>
    </item>
    
  </channel>
</rss>
